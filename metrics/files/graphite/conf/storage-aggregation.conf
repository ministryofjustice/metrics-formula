# Aggregation methods for whisper files. Entries are scanned in order,
# and first match wins. This file is scanned for changes every 60 seconds
#
#  [name]
#  pattern = <regex>
#  xFilesFactor = <float between 0 and 1>
#  aggregationMethod = <average|sum|last|max|min>
#
#  name: Arbitrary unique name for the rule
#  pattern: Regex pattern to match against the metric name
#  xFilesFactor: Ratio of valid data points required for aggregation to the next retention to occur
#  aggregationMethod: function to apply to data points for aggregation
#
[min]
pattern = \.min$
xFilesFactor = 0.1
aggregationMethod = min

[max]
pattern = \.max$
xFilesFactor = 0.1
aggregationMethod = max

[sum]
pattern = \.count$
xFilesFactor = 0
aggregationMethod = sum

[collectd-statsd-average]
pattern = -average$
xFilesFactor = 0.1
aggregationMethod = average

# Example of metrics created by the statsd plugin to collectd with a timer:
#
# Given a $statsd.timing("pdf.generate") it will generate this
#   metrics.civilclaims.demo.ac-front.statsd.latency.pdf.generate-average
[collectd-statsd-lower]
pattern = \.statsd\.latency\..*-lower$
xFilesFactor = 0.1
aggregationMethod = min

[collectd-statsd-upper]
pattern = \.statsd\.latency\..*-upper$
xFilesFactor = 0.1
aggregationMethod = max

[collectd-statsd-sum]
pattern = -\.statsd\.latency\..*sum$
xFilesFactor = 0
aggregationMethod = sum

[collectd-statsd-percentile]
pattern = \.statsd\.latency\..*-percentile-\d+$
xFilesFactor = 0.1
aggregationMethod = average

[collectd-statsd-count]
pattern = \.statsd\.latency\..*-count$
xFilesFactor = 0
aggregationMethod = sum

[default_average]
pattern = .*
xFilesFactor = 0.0
aggregationMethod = average
